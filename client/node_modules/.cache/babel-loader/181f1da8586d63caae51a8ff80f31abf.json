{"ast":null,"code":"// import { initializeApp } from 'firebase/app';\n// import { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider,\n//   createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut,\n//   onAuthStateChanged,} from 'firebase/auth';\n// import { getFirestore, doc, getDoc, setDoc, collection,\n//   writeBatch, query, getDocs,} from 'firebase/firestore';\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/firestore';\nimport 'firebase/compat/auth';\nconst config = {\n  apiKey: \"AIzaSyBc4TiVk1m0_h7bCqQ0K5RQMnpc4R5v2pU\",\n  authDomain: \"hua-clothing-db.firebaseapp.com\",\n  projectId: \"hua-clothing-db\",\n  storageBucket: \"hua-clothing-db.appspot.com\",\n  messagingSenderId: \"657692789500\",\n  appId: \"1:657692789500:web:e3cb643d2b815ae5156579\"\n};\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase; // const firebaseApp = initializeApp(firebaseConfig);\n// const googleProvider = new GoogleAuthProvider();\n// googleProvider.setCustomParameters({prompt: 'select_account',});\n//\n// export const auth = getAuth();\n// export const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);\n// export const signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider);\n// export const db = getFirestore();\n//\n// export const createUserDocumentFromAuth = async (userAuth, additionalInformation = {}) => {\n//   if (!userAuth) return;\n//   const userDocRef = doc(db, 'users', userAuth.uid);\n//   const userSnapshot = await getDoc(userDocRef);\n//   if (!userSnapshot.exists()) {\n//     const { displayName, email } = userAuth;\n//     const createdAt = new Date();\n//     try {\n//       await setDoc(userDocRef, {\n//         displayName,\n//         email,\n//         createdAt,\n//         ...additionalInformation,\n//       });\n//     } catch (error) {\n//       console.log('error creating the user', error.message);\n//     }\n//   }\n//   return userDocRef;\n// };\n//\n// export const getCategoriesAndDocuments = async () => {\n//   const collectionRef = collection(db, 'categories');\n//   const q = query(collectionRef);\n//   const querySnapshot = await getDocs(q);\n//   const categoryMap = querySnapshot.docs.reduce((acc, docSnapshot) => {\n//     const { title, items } = docSnapshot.data();\n//     acc[title.toLowerCase()] = items;\n//     return acc;\n//   }, {});\n//   return categoryMap;\n// };\n//\n// export const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n//   const batch = writeBatch(db);\n//   const collectionRef = collection(db, collectionKey);\n//\n//   objectsToAdd.forEach((object) => {\n//      const docRef = doc(collectionRef, object.title.toLowerCase());\n//      batch.set(docRef, object);\n//   });\n//\n//   await batch.commit();\n//   console.log('done');\n// };\n//\n// export const createAuthUserWithEmailAndPassword = async (email, password) => {\n//   if (!email || !password) return;\n//   return await createUserWithEmailAndPassword(auth, email, password);\n// };\n//\n// export const signInAuthUserWithEmailAndPassword = async (email, password) => {\n//   if (!email || !password) return;\n//   return await signInWithEmailAndPassword(auth, email, password);\n// };\n//\n// export const signOutUser = async () => await signOut(auth);\n//\n// export const onAuthStateChangedListener = (callback) =>\n//   onAuthStateChanged(auth, callback);","map":{"version":3,"sources":["/Users/conghua/Desktop/hua-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,QAAP,MAAqB,qBAArB;AACA,OAAO,2BAAP;AACA,OAAO,sBAAP;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,iCAFC;AAGbC,EAAAA,SAAS,EAAE,iBAHE;AAIbC,EAAAA,aAAa,EAAE,6BAJF;AAKbC,EAAAA,iBAAiB,EAAE,cALN;AAMbC,EAAAA,KAAK,EAAE;AANM,CAAf;AASAP,QAAQ,CAACQ,aAAT,CAAuBP,MAAvB;AAEA,OAAO,MAAMQ,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AAEA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;;AAEA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AACpB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBV,QAA/B;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,QAAI;AACF,YAAMV,OAAO,CAACW,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGV;AAJa,OAAZ,CAAN;AAMD,KAPD,CAOE,OAAOa,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACD;AACF;;AAED,SAAOf,OAAP;AACD,CAvBM;AAyBP,OAAO,MAAMgB,IAAI,GAAG5B,QAAQ,CAAC4B,IAAT,EAAb;AACP,OAAO,MAAMf,SAAS,GAAGb,QAAQ,CAACa,SAAT,EAAlB;AAEP,MAAMgB,QAAQ,GAAG,IAAI7B,QAAQ,CAAC4B,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAe7B,QAAf,C,CAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import { initializeApp } from 'firebase/app';\n// import { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider,\n//   createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut,\n//   onAuthStateChanged,} from 'firebase/auth';\n// import { getFirestore, doc, getDoc, setDoc, collection,\n//   writeBatch, query, getDocs,} from 'firebase/firestore';\n\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/firestore';\nimport 'firebase/compat/auth';\n\nconst config = {\n  apiKey: \"AIzaSyBc4TiVk1m0_h7bCqQ0K5RQMnpc4R5v2pU\",\n  authDomain: \"hua-clothing-db.firebaseapp.com\",\n  projectId: \"hua-clothing-db\",\n  storageBucket: \"hua-clothing-db.appspot.com\",\n  messagingSenderId: \"657692789500\",\n  appId: \"1:657692789500:web:e3cb643d2b815ae5156579\",\n};\n\nfirebase.initializeApp(config);\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: 'select_account' });\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;\n\n\n\n\n\n\n\n\n\n// const firebaseApp = initializeApp(firebaseConfig);\n// const googleProvider = new GoogleAuthProvider();\n// googleProvider.setCustomParameters({prompt: 'select_account',});\n//\n// export const auth = getAuth();\n// export const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);\n// export const signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider);\n// export const db = getFirestore();\n//\n// export const createUserDocumentFromAuth = async (userAuth, additionalInformation = {}) => {\n//   if (!userAuth) return;\n//   const userDocRef = doc(db, 'users', userAuth.uid);\n//   const userSnapshot = await getDoc(userDocRef);\n//   if (!userSnapshot.exists()) {\n//     const { displayName, email } = userAuth;\n//     const createdAt = new Date();\n//     try {\n//       await setDoc(userDocRef, {\n//         displayName,\n//         email,\n//         createdAt,\n//         ...additionalInformation,\n//       });\n//     } catch (error) {\n//       console.log('error creating the user', error.message);\n//     }\n//   }\n//   return userDocRef;\n// };\n//\n// export const getCategoriesAndDocuments = async () => {\n//   const collectionRef = collection(db, 'categories');\n//   const q = query(collectionRef);\n//   const querySnapshot = await getDocs(q);\n//   const categoryMap = querySnapshot.docs.reduce((acc, docSnapshot) => {\n//     const { title, items } = docSnapshot.data();\n//     acc[title.toLowerCase()] = items;\n//     return acc;\n//   }, {});\n//   return categoryMap;\n// };\n//\n// export const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n//   const batch = writeBatch(db);\n//   const collectionRef = collection(db, collectionKey);\n//\n//   objectsToAdd.forEach((object) => {\n//      const docRef = doc(collectionRef, object.title.toLowerCase());\n//      batch.set(docRef, object);\n//   });\n//\n//   await batch.commit();\n//   console.log('done');\n// };\n//\n// export const createAuthUserWithEmailAndPassword = async (email, password) => {\n//   if (!email || !password) return;\n//   return await createUserWithEmailAndPassword(auth, email, password);\n// };\n//\n// export const signInAuthUserWithEmailAndPassword = async (email, password) => {\n//   if (!email || !password) return;\n//   return await signInWithEmailAndPassword(auth, email, password);\n// };\n//\n// export const signOutUser = async () => await signOut(auth);\n//\n// export const onAuthStateChangedListener = (callback) =>\n//   onAuthStateChanged(auth, callback);\n"]},"metadata":{},"sourceType":"module"}